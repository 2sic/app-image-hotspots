// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "HotspotMarkers.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class HotspotMarkers
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.06.02
// App/Edition: Image Hotspots/
// User:        2sic Web-Developer
// When:        2024-04-04 09:22:07Z
using ToSic.Sxc.Adam;

namespace AppCode.Data
{
  // This is a generated class for HotspotMarkers 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// HotspotMarkers data. <br/>
  /// Generated 2024-04-04 09:22:07Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.HotspotHeight`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class HotspotMarkers: AutoGenerated.ZagHotspotMarkers
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.HotspotMarkers in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagHotspotMarkers: Custom.Data.CustomItem
  {
    /// <summary>
    /// HotspotHeight as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("HotspotHeight", scrubHtml: true) etc.
    /// </summary>
    public string HotspotHeight => _item.String("HotspotHeight", fallback: "");

    /// <summary>
    /// HotspotIcon as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("HotspotIcon")
    /// </summary>
    public string HotspotIcon => _item.Url("HotspotIcon");

    /// <summary>
    /// Get the file object for HotspotIcon - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile HotspotIconFile => _item.File("HotspotIcon");

    /// <summary>
    /// Get the folder object for HotspotIcon.
    /// </summary>
    public IFolder HotspotIconFolder => _item.Folder("HotspotIcon");

    /// <summary>
    /// HotspotOffsetX as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("HotspotOffsetX", scrubHtml: true) etc.
    /// </summary>
    public string HotspotOffsetX => _item.String("HotspotOffsetX", fallback: "");

    /// <summary>
    /// HotspotOffsetY as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("HotspotOffsetY", scrubHtml: true) etc.
    /// </summary>
    public string HotspotOffsetY => _item.String("HotspotOffsetY", fallback: "");

    /// <summary>
    /// HotspotWidth as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("HotspotWidth", scrubHtml: true) etc.
    /// </summary>
    public string HotspotWidth => _item.String("HotspotWidth", fallback: "");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");
  }
}