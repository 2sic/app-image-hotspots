// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "Hotspot.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class Hotspot
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.06.02
// App/Edition: Image Hotspots/
// User:        2sic Web-Developer
// When:        2024-04-04 09:22:07Z
using ToSic.Sxc.Adam;

namespace AppCode.Data
{
  // This is a generated class for Hotspot 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// Hotspot data. <br/>
  /// Generated 2024-04-04 09:22:07Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Description`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class Hotspot: AutoGenerated.ZagHotspot
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.Hotspot in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagHotspot: Custom.Data.CustomItem
  {
    /// <summary>
    /// Description as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Description", scrubHtml: true) etc.
    /// </summary>
    public string Description => _item.String("Description", fallback: "");

    /// <summary>
    /// HotspotMarker as single item of HotspotMarkers.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type HotspotMarkers was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public HotspotMarkers HotspotMarker => _hotspotMarker ??= _item.Child<HotspotMarkers>("HotspotMarker");
    private HotspotMarkers _hotspotMarker;

    /// <summary>
    /// Image as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Image")
    /// </summary>
    public string Image => _item.Url("Image");

    /// <summary>
    /// Get the file object for Image - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile ImageFile => _item.File("Image");

    /// <summary>
    /// Get the folder object for Image.
    /// </summary>
    public IFolder ImageFolder => _item.Folder("Image");

    /// <summary>
    /// OverlayLayout as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("OverlayLayout", scrubHtml: true) etc.
    /// </summary>
    public string OverlayLayout => _item.String("OverlayLayout", fallback: "");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");

    /// <summary>
    /// X as decimal. <br/>
    /// To get other types use methods such as .Int("X")
    /// </summary>
    public decimal X => _item.Decimal("X");

    /// <summary>
    /// Y as decimal. <br/>
    /// To get other types use methods such as .Int("Y")
    /// </summary>
    public decimal Y => _item.Decimal("Y");
  }
}