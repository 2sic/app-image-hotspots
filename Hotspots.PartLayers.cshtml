@inherits AppCode.Razor.AppRazor<ImageWithHotspots>
@using ToSic.Razor.Blade
@using AppCode
@using AppCode.Data

@{
  var hotSpots = Model; 
  var toolbar = Kit.Toolbar.Default().DetectDemo(hotSpots).Delete();
}

@* This creates the hidden layers which will appear when hotspots are clicked *@  
@foreach (var hotspot in hotSpots.Hotspots) {
  var imgIsAbove = hotspot.OverlayLayout == "img/text"; // alternative is img-text
  var layoutClass = imgIsAbove ? "" : "display-flex-row";

  // Get image settings based on the Lightbox-presets, with image height / width based on layout type
  var resizeSettings = Kit.Image.Settings("Lightbox",
    width: AppSet.OverlayImageMaxWidth * (imgIsAbove ? 1 : 0.75),
    height: AppSet.OverlayImageMaxHeight * (imgIsAbove ? 0.7 : 1 )
  );

  var hasImage = Text.Has(hotspot.Image);
  var hasDescription = Text.Has(hotspot.Description);

  <div id="hotspot3-content-@hotspot.Id-@UniqueKey" class="hotspot3-fancybox-content" style="display: none" @toolbar.For(hotspot)>
    <div class="@layoutClass">
      @if (hasImage) {
        <div>
          @hotspot.Picture("Image", settings: resizeSettings, imgAltFallback: hotspot.Title)
        </div>
      }

      @if (hasDescription) {
        <div class="hotspot3-fancybox-text">
          @hotspot.Html("Description", container:"")
        </div>
      }

      @* If neither image nor description is set, we need to add a clear div to make sure the layout is correct *@
      @if (!hasImage && !hasDescription) {
        <div class="hotspot3-fancybox-text">
          @AppRes.PopupNoContent;
        </div>
      }
    </div>
  </div>
}